"""
Print Prompts Script

Displays the full prompts generated by CentralPromptManager for debugging and inspection.
Shows how prompts are populated with character data, inventory, and examples.
"""
import sys
from pathlib import Path
import argparse

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.llm.central_prompt_manager import CentralPromptManager
from src.rag.context_assembler import ContextAssembler
from src.utils.character_manager import CharacterManager


def print_separator(title: str):
    """Print a visual separator with title"""
    print("\n" + "=" * 80)
    print(f" {title} ")
    print("=" * 80 + "\n")


def print_tool_selector_prompt(prompt_manager, query: str, character_name: str, character=None):
    """Print the tool and intention selector prompt"""
    print_separator("TOOL & INTENTION SELECTOR PROMPT")
    
    prompt = prompt_manager.get_tool_and_intention_selector_prompt(
        query, 
        character_name,
        character=character
    )
    
    print(prompt)
    print(f"\nüìè Prompt length: {len(prompt)} characters")


def print_entity_extractor_prompt(prompt_manager, query: str):
    """Print the entity extractor prompt"""
    print_separator("ENTITY EXTRACTOR PROMPT")
    
    prompt = prompt_manager.get_entity_extraction_prompt(query)
    
    print(prompt)
    print(f"\nüìè Prompt length: {len(prompt)} characters")


def print_final_response_prompt(prompt_manager, query: str, sample_results: dict = None):
    """Print the final response prompt with sample data"""
    print_separator("FINAL RESPONSE PROMPT")
    
    if sample_results is None:
        # Create minimal sample results for demonstration
        sample_results = {
            "character": type('obj', (object,), {
                'character_data': {
                    'name': 'Duskryn Nightwarden',
                    'class': 'Warlock',
                    'level': 10,
                    'hp': 75
                }
            })(),
            "rulebook": None,
            "session_notes": None
        }
    
    prompt = prompt_manager.get_final_response_prompt(sample_results, query)
    
    print(prompt)
    print(f"\nüìè Prompt length: {len(prompt)} characters")


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="Display full prompts from CentralPromptManager",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Print all prompts for a specific query
  python -m scripts.print_prompts -q "What is my AC?"
  
  # Print only the tool selector prompt
  python -m scripts.print_prompts -q "What spells can I cast?" --tool-selector
  
  # Print only the entity extractor prompt
  python -m scripts.print_prompts -q "Tell me about Eldaryth of Regret" --entity-extractor
  
  # Print only the final response prompt
  python -m scripts.print_prompts -q "What is my backstory?" --final-response
  
  # Print prompts without loading character (faster, no inventory context)
  python -m scripts.print_prompts -q "How does grappling work?" --no-character
        """
    )
    
    parser.add_argument(
        "-q", "--query",
        required=True,
        help="Query to generate prompts for"
    )
    parser.add_argument(
        "--tool-selector",
        action="store_true",
        help="Only print tool selector prompt"
    )
    parser.add_argument(
        "--entity-extractor",
        action="store_true",
        help="Only print entity extractor prompt"
    )
    parser.add_argument(
        "--final-response",
        action="store_true",
        help="Only print final response prompt"
    )
    parser.add_argument(
        "--no-character",
        action="store_true",
        help="Don't load character (faster, no inventory context)"
    )
    parser.add_argument(
        "--character-name",
        default="Duskryn Nightwarden",
        help="Character name to use (default: Duskryn Nightwarden)"
    )
    
    args = parser.parse_args()
    
    # Initialize components
    print("üöÄ Initializing prompt manager...")
    context_assembler = ContextAssembler()
    prompt_manager = CentralPromptManager(context_assembler)
    
    # Load character if requested
    character = None
    if not args.no_character:
        try:
            print(f"üì¶ Loading character: {args.character_name}...")
            character_manager = CharacterManager()
            character = character_manager.load_character(args.character_name)
            print(f"   ‚úÖ Character loaded: {character.character_base.name}")
            
            # Show inventory summary
            if character.inventory:
                total_items = 0
                if character.inventory.equipped_items:
                    total_items += sum(len(items) for items in character.inventory.equipped_items.values())
                if character.inventory.backpack:
                    total_items += len(character.inventory.backpack)
                print(f"   üì¶ Inventory: {total_items} items")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Failed to load character: {e}")
            print(f"   ‚ÑπÔ∏è  Continuing without character data")
    
    # Determine which prompts to print
    print_all = not (args.tool_selector or args.entity_extractor or args.final_response)
    
    # Print requested prompts
    if print_all or args.tool_selector:
        print_tool_selector_prompt(
            prompt_manager, 
            args.query, 
            args.character_name,
            character=character
        )
    
    if print_all or args.entity_extractor:
        print_entity_extractor_prompt(prompt_manager, args.query)
    
    if print_all or args.final_response:
        print_final_response_prompt(prompt_manager, args.query)
    
    print("\n‚úÖ Done!")


if __name__ == "__main__":
    main()
